# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szIxb9Iej_28AOXZn3hXHvQcUrG3VWHc
"""

!pip install kaggle

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c dogs-vs-cats

!ls

from zipfile import ZipFile
data='dogs-vs-cats.zip'
with ZipFile(data,'r') as zip:
  zip.extractall()
  print("Everything is extracted")

data='train.zip'
with ZipFile(data,'r') as zip:
  zip.extractall()
  print("Everything is extracted")

import os
path,dirs,file=next(os.walk('/content/train'))
print(len(file)," is the total coutn")

file_name=os.listdir("/content/train")
print(file_name)

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

img=mpimg.imread('/content/train/dog.7766.jpg')
img_plt = plt.imshow(img)
plt.imshow(img)

img=mpimg.imread('/content/train/cat.11527.jpg')
img_plt = plt.imshow(img)
plt.imshow(img)

file_name=os.listdir("/content/train")
for i in range(5):
  name=file_name[i]
  print(name[0:3])

file_name=os.listdir("/content/train")
dog_count=0
cat_count=0
for file_image in file_name:

  name=file_image[0:3]
  if name=="dog":
    dog_count+=1;
  else:
    cat_count += 1

print('Number of dog images =', dog_count)
print('Number of cat images =', cat_count)

os.mkdir('/content/image resized')

original_folder='/content/train/'
resized_foler='/content/image resized/'
for i in range(2000):
  file_name=os.listdir('/content/train/')[i]
  img_path=original_folder+file_name
  img=Image.open(img_path)
  img=img.resize((224,224))
  img=img.convert("RGB")
  New_path=resized_foler+file_name
  img.save(New_path)

img=mpimg.imread('/content/image resized/cat.11527.jpg')
img_plt = plt.imshow(img)
plt.imshow(img)

img=mpimg.imread('/content/image resized/dog.7766.jpg')
img_plt = plt.imshow(img)
plt.imshow(img)

# creaing a for loop to assign labels
filenames = os.listdir('/content/image resized/')


labels = []

for i in range(2000):

  file_name = filenames[i]
  label = file_name[0:3]

  if label == 'dog':
    labels.append(1)

  else:
    labels.append(0)

print(file_names[0:5])
print(labels[0:5])
print(len(file_names))

values,counts=np.unique(labels,return_counts=True)
print(values)
print(counts)

import cv2
import glob

image_directory = '/content/image resized/'
image_extension = ['png', 'jpg']

files = []

[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

type(dog_cat_images)

dog_cat_images.shape

X = dog_cat_images
Y = np.asarray(labels)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

X_train_scaled=X_train/255
X_test_scaled=X_test/255

print(X_train_scaled)

import tensorflow as tf
import tensorflow_hub as hub

# mobile_net_model='https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'
# pretrained_model=hub.KerasLayer(mobile_net_model,input_shape=(224,224,3),trainable=False)

import tensorflow as tf
import tensorflow_hub as hub

num_of_classes = 2

# âœ… Wrapper to make hub.KerasLayer acceptable to Sequential
class WrappedHubLayer(tf.keras.layers.Layer):
    def __init__(self, hub_url, input_shape):
        super(WrappedHubLayer, self).__init__()
        self.hub_layer = hub.KerasLayer(hub_url, input_shape=input_shape, trainable=False)

    def call(self, inputs):
        return self.hub_layer(inputs)

# Use wrapped layer in Sequential
model = tf.keras.Sequential([
    WrappedHubLayer("https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/5", input_shape=(224, 224, 3)),
    tf.keras.layers.Dense(num_of_classes, activation='softmax')
])

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics = ['acc']
)

model.summary()

model.fit(X_train_scaled, Y_train, epochs=5)

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image represents a Cat')

else:
  print('The image represents a Dog')

